/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "include/PhonetisaurusScript.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    PathData *obj;
    PyBindGenWrapperFlags flags:8;
} PyPathData;


extern PyTypeObject PyPathData_Type;


typedef struct {
    PyObject_HEAD
    PhonetisaurusScript *obj;
    PyBindGenWrapperFlags flags:8;
} PyPhonetisaurusScript;


extern PyTypeObject PyPhonetisaurusScript_Type;


typedef struct {
    PyObject_HEAD
    std::vector<int> *obj;
} Pystd__vector__lt__int__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__int__gt__ *container;
    std::vector<int>::iterator *iterator;
} Pystd__vector__lt__int__gt__Iter;


extern PyTypeObject Pystd__vector__lt__int__gt___Type;
extern PyTypeObject Pystd__vector__lt__int__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container);

typedef struct {
    PyObject_HEAD
    std::vector<float> *obj;
} Pystd__vector__lt__float__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__float__gt__ *container;
    std::vector<float>::iterator *iterator;
} Pystd__vector__lt__float__gt__Iter;


extern PyTypeObject Pystd__vector__lt__float__gt___Type;
extern PyTypeObject Pystd__vector__lt__float__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___float___gt__(PyObject *arg, std::vector<float> *container);

typedef struct {
    PyObject_HEAD
    std::vector<PathData> *obj;
} Pystd__vector__lt__PathData__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__PathData__gt__ *container;
    std::vector<PathData>::iterator *iterator;
} Pystd__vector__lt__PathData__gt__Iter;


extern PyTypeObject Pystd__vector__lt__PathData__gt___Type;
extern PyTypeObject Pystd__vector__lt__PathData__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___PathData___gt__(PyObject *arg, std::vector<PathData> *container);

extern PyTypeObject *Pystd__exception_Type;


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__float(PyObject *value, float *address);


int _wrap_convert_py2c__PathData(PyObject *value, PathData *address);

static PyMethodDef Phonetisaurus_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


static PyObject* _wrap_PyPathData__get_PathWeight(PyPathData *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->PathWeight);
    return py_retval;
}
static int _wrap_PyPathData__set_PathWeight(PyPathData *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->PathWeight)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPathData__get_PathWeights(PyPathData *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< float > retval;
    Pystd__vector__lt__float__gt__ *py_std__vector__lt__float__gt__;

    py_std__vector__lt__float__gt__ = PyObject_New(Pystd__vector__lt__float__gt__, &Pystd__vector__lt__float__gt___Type);
    py_std__vector__lt__float__gt__->obj = new std::vector<float>(self->obj->PathWeights);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__float__gt__);
    return py_retval;
}
static int _wrap_PyPathData__set_PathWeights(PyPathData *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< float > retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___float___gt__, &self->obj->PathWeights)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPathData__get_ILabels(PyPathData *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;
    Pystd__vector__lt__int__gt__ *py_std__vector__lt__int__gt__;

    py_std__vector__lt__int__gt__ = PyObject_New(Pystd__vector__lt__int__gt__, &Pystd__vector__lt__int__gt___Type);
    py_std__vector__lt__int__gt__->obj = new std::vector<int>(self->obj->ILabels);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__int__gt__);
    return py_retval;
}
static int _wrap_PyPathData__set_ILabels(PyPathData *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___int___gt__, &self->obj->ILabels)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPathData__get_OLabels(PyPathData *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;
    Pystd__vector__lt__int__gt__ *py_std__vector__lt__int__gt__;

    py_std__vector__lt__int__gt__ = PyObject_New(Pystd__vector__lt__int__gt__, &Pystd__vector__lt__int__gt___Type);
    py_std__vector__lt__int__gt__->obj = new std::vector<int>(self->obj->OLabels);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__int__gt__);
    return py_retval;
}
static int _wrap_PyPathData__set_OLabels(PyPathData *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___int___gt__, &self->obj->OLabels)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPathData__get_Uniques(PyPathData *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;
    Pystd__vector__lt__int__gt__ *py_std__vector__lt__int__gt__;

    py_std__vector__lt__int__gt__ = PyObject_New(Pystd__vector__lt__int__gt__, &Pystd__vector__lt__int__gt___Type);
    py_std__vector__lt__int__gt__->obj = new std::vector<int>(self->obj->Uniques);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__int__gt__);
    return py_retval;
}
static int _wrap_PyPathData__set_Uniques(PyPathData *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< int > retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___int___gt__, &self->obj->Uniques)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyPathData__getsets[] = {
    {
        (char*) "PathWeight", /* attribute name */
        (getter) _wrap_PyPathData__get_PathWeight, /* C function to get the attribute */
        (setter) _wrap_PyPathData__set_PathWeight, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "PathWeights", /* attribute name */
        (getter) _wrap_PyPathData__get_PathWeights, /* C function to get the attribute */
        (setter) _wrap_PyPathData__set_PathWeights, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ILabels", /* attribute name */
        (getter) _wrap_PyPathData__get_ILabels, /* C function to get the attribute */
        (setter) _wrap_PyPathData__set_ILabels, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "OLabels", /* attribute name */
        (getter) _wrap_PyPathData__get_OLabels, /* C function to get the attribute */
        (setter) _wrap_PyPathData__set_OLabels, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "Uniques", /* attribute name */
        (getter) _wrap_PyPathData__get_Uniques, /* C function to get the attribute */
        (setter) _wrap_PyPathData__set_Uniques, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyPathData__tp_init__0(PyPathData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new PathData();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyPathData__tp_init__1(PyPathData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyPathData *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyPathData_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new PathData(*((PyPathData *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyPathData__tp_init__2(PyPathData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new PathData();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyPathData__tp_init(PyPathData *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyPathData__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyPathData__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyPathData__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyPathData__copy__(PyPathData *self, PyObject *PYBINDGEN_UNUSED(_args))
{

    PyPathData *py_copy;
    py_copy = PyObject_New(PyPathData, &PyPathData_Type);
    py_copy->obj = new PathData(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyPathData_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyPathData__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyPathData__tp_dealloc(PyPathData *self)
{
        PathData *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyPathData_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.PathData",            /* tp_name */
    sizeof(PyPathData),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyPathData__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PathData(ctor_arg)\nPathData()\nPathData()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyPathData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyPathData__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyPathData__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyPhonetisaurusScript__tp_init(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs)
{
    const char *model;
    Py_ssize_t model_len;
    const char *keywords[] = {"model", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &model, &model_len)) {
        return -1;
    }
    try
    {
        self->obj = new PhonetisaurusScript(std::string(model, model_len));
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    } catch (std::exception const &exc) {
        PyErr_SetString((PyObject *) Pystd__exception_Type, exc.what());
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyPhonetisaurusScript_Phoneticize(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *word;
    Py_ssize_t word_len;
    int nbest;
    int beam;
    float threshold;
    bool write_fsts;
    PyObject *py_write_fsts;
    bool accumulate;
    PyObject *py_accumulate;
    float pmass;
    const char *keywords[] = {"word", "nbest", "beam", "threshold", "write_fsts", "accumulate", "pmass", NULL};
    std::vector< PathData > retval;
    Pystd__vector__lt__PathData__gt__ *py_std__vector__lt__PathData__gt__;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#iifOOf", (char **) keywords, &word, &word_len, &nbest, &beam, &threshold, &py_write_fsts, &py_accumulate, &pmass)) {
        return NULL;
    }
    write_fsts = (bool) PyObject_IsTrue(py_write_fsts);
    accumulate = (bool) PyObject_IsTrue(py_accumulate);
    retval = self->obj->Phoneticize(std::string(word, word_len), nbest, beam, threshold, write_fsts, accumulate, pmass);
    py_std__vector__lt__PathData__gt__ = PyObject_New(Pystd__vector__lt__PathData__gt__, &Pystd__vector__lt__PathData__gt___Type);
    py_std__vector__lt__PathData__gt__->obj = new std::vector<PathData>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__PathData__gt__);
    return py_retval;
}



PyObject *
_wrap_PyPhonetisaurusScript_FindIsym__0(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::string retval;
    int symbol_id;
    const char *keywords[] = {"symbol_id", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &symbol_id)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->FindIsym(symbol_id);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

PyObject *
_wrap_PyPhonetisaurusScript_FindIsym__1(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *symbol;
    Py_ssize_t symbol_len;
    const char *keywords[] = {"symbol", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &symbol, &symbol_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->FindIsym(std::string(symbol, symbol_len));
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyPhonetisaurusScript_FindIsym(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyPhonetisaurusScript_FindIsym__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyPhonetisaurusScript_FindIsym__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyPhonetisaurusScript_FindOsym__0(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    std::string retval;
    int symbol_id;
    const char *keywords[] = {"symbol_id", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &symbol_id)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->FindOsym(symbol_id);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

PyObject *
_wrap_PyPhonetisaurusScript_FindOsym__1(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int retval;
    const char *symbol;
    Py_ssize_t symbol_len;
    const char *keywords[] = {"symbol", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &symbol, &symbol_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->FindOsym(std::string(symbol, symbol_len));
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject * _wrap_PyPhonetisaurusScript_FindOsym(PyPhonetisaurusScript *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyPhonetisaurusScript_FindOsym__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyPhonetisaurusScript_FindOsym__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyPhonetisaurusScript_methods[] = {
    {(char *) "Phoneticize", (PyCFunction) _wrap_PyPhonetisaurusScript_Phoneticize, METH_KEYWORDS|METH_VARARGS, "Phoneticize(word, nbest, beam, threshold, write_fsts, accumulate, pmass)\n\ntype: word: std::string\ntype: nbest: int\ntype: beam: int\ntype: threshold: float\ntype: write_fsts: bool\ntype: accumulate: bool\ntype: pmass: float" },
    {(char *) "FindIsym", (PyCFunction) _wrap_PyPhonetisaurusScript_FindIsym, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "FindOsym", (PyCFunction) _wrap_PyPhonetisaurusScript_FindOsym, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyPhonetisaurusScript__tp_dealloc(PyPhonetisaurusScript *self)
{
        PhonetisaurusScript *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

PyTypeObject PyPhonetisaurusScript_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.PhonetisaurusScript",            /* tp_name */
    sizeof(PyPhonetisaurusScript),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyPhonetisaurusScript__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PhonetisaurusScript(model)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyPhonetisaurusScript_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyPhonetisaurusScript__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt__int__gt__Iter__tp_clear(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__int__gt__Iter__tp_traverse(Pystd__vector__lt__int__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__int__gt____tp_dealloc(Pystd__vector__lt__int__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt____tp_iter(Pystd__vector__lt__int__gt__ *self)
{
    Pystd__vector__lt__int__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__int__gt__Iter, &Pystd__vector__lt__int__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<int>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext(Pystd__vector__lt__int__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<int>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "i", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__int(PyObject *value, int *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__int__gt___Type)) {
        *container = *((Pystd__vector__lt__int__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            int item;
            if (!_wrap_convert_py2c__int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__int__gt__ instance, or a list of int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__int__gt____tp_init(Pystd__vector__lt__int__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<int>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__int__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__int__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__int__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__int__gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__int__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__int__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__int__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__float__gt__Iter__tp_clear(Pystd__vector__lt__float__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__float__gt__Iter__tp_traverse(Pystd__vector__lt__float__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__float__gt____tp_dealloc(Pystd__vector__lt__float__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__float__gt__Iter__tp_dealloc(Pystd__vector__lt__float__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__float__gt____tp_iter(Pystd__vector__lt__float__gt__ *self)
{
    Pystd__vector__lt__float__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__float__gt__Iter, &Pystd__vector__lt__float__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<float>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__float__gt__Iter__tp_iter(Pystd__vector__lt__float__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__float__gt__Iter__tp_iternext(Pystd__vector__lt__float__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<float>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "f", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__float(PyObject *value, float *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___float___gt__(PyObject *arg, std::vector<float> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__float__gt___Type)) {
        *container = *((Pystd__vector__lt__float__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            float item;
            if (!_wrap_convert_py2c__float(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__float__gt__ instance, or a list of float");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__float__gt____tp_init(Pystd__vector__lt__float__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<float>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___float___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__float__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__float__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__float__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__float__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__float__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__float__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__float__gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__float__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__float__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__float__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__float__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__float__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__float__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__float__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__PathData__gt__Iter__tp_clear(Pystd__vector__lt__PathData__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__PathData__gt__Iter__tp_traverse(Pystd__vector__lt__PathData__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__PathData__gt____tp_dealloc(Pystd__vector__lt__PathData__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__PathData__gt__Iter__tp_dealloc(Pystd__vector__lt__PathData__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__PathData__gt____tp_iter(Pystd__vector__lt__PathData__gt__ *self)
{
    Pystd__vector__lt__PathData__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__PathData__gt__Iter, &Pystd__vector__lt__PathData__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<PathData>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__PathData__gt__Iter__tp_iter(Pystd__vector__lt__PathData__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__PathData__gt__Iter__tp_iternext(Pystd__vector__lt__PathData__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<PathData>::iterator iter;
    PyPathData *py_PathData;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_PathData = PyObject_New(PyPathData, &PyPathData_Type);
    py_PathData->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PathData->obj = new PathData((*iter));
    py_retval = Py_BuildValue((char *) "N", py_PathData);
    return py_retval;
}

int _wrap_convert_py2c__PathData(PyObject *value, PathData *address)
{
    PyObject *py_retval;
    PyPathData *tmp_PathData;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyPathData_Type, &tmp_PathData)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_PathData->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___PathData___gt__(PyObject *arg, std::vector<PathData> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__PathData__gt___Type)) {
        *container = *((Pystd__vector__lt__PathData__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PathData item;
            if (!_wrap_convert_py2c__PathData(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__PathData__gt__ instance, or a list of PathData");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__PathData__gt____tp_init(Pystd__vector__lt__PathData__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<PathData>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___PathData___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__PathData__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__PathData__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__PathData__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__PathData__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__PathData__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__PathData__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__PathData__gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "Phonetisaurus.Std__vector__lt__PathData__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__PathData__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__PathData__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL,
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__PathData__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__PathData__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__PathData__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__PathData__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- exceptions --- */


PyTypeObject *Pystd__exception_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef Phonetisaurus_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Phonetisaurus",
    NULL,
    -1,
    Phonetisaurus_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(Phonetisaurus)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&Phonetisaurus_moduledef);
    #else
    m = Py_InitModule3((char *) "Phonetisaurus", Phonetisaurus_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Register the 'PathData' class */
    if (PyType_Ready(&PyPathData_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "PathData", (PyObject *) &PyPathData_Type);
    /* Register the 'PhonetisaurusScript' class */
    if (PyType_Ready(&PyPhonetisaurusScript_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "PhonetisaurusScript", (PyObject *) &PyPhonetisaurusScript_Type);
    /* Register the 'std::vector<int>' class */
    if (PyType_Ready(&Pystd__vector__lt__int__gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt__int__gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__", (PyObject *) &Pystd__vector__lt__int__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__Iter", (PyObject *) &Pystd__vector__lt__int__gt__Iter_Type);
    /* Register the 'std::vector<float>' class */
    if (PyType_Ready(&Pystd__vector__lt__float__gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt__float__gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__float__gt__", (PyObject *) &Pystd__vector__lt__float__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__float__gt__Iter", (PyObject *) &Pystd__vector__lt__float__gt__Iter_Type);
    /* Register the 'std::vector<PathData>' class */
    if (PyType_Ready(&Pystd__vector__lt__PathData__gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt__PathData__gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__PathData__gt__", (PyObject *) &Pystd__vector__lt__PathData__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__PathData__gt__Iter", (PyObject *) &Pystd__vector__lt__PathData__gt__Iter_Type);
    /* Register the 'std::exception' exception */
    if ((Pystd__exception_Type = (PyTypeObject*) PyErr_NewException((char*)"Phonetisaurus.exception", NULL, NULL)) == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF((PyObject *) Pystd__exception_Type);
    PyModule_AddObject(m, (char *) "exception", (PyObject *) Pystd__exception_Type);
    return MOD_RETURN(m);
}
